buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies { classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT' }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.7"
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

ext.buildnumber = 0
if (System.getenv('BUILD_NUMBER') != null)
    project.buildnumber = System.getenv('BUILD_NUMBER')
else {
    try {
        ext.buildnumber += "_" + "git rev-parse --abbrev-ref HEAD".execute().text.trim();
        ext.buildnumber += "_" + "git rev-parse --short HEAD".execute().text.trim();
    } catch (all) {}
    logger.lifecycle "No build number detected, setting to ${ext.buildnumber}"
}

group = "com.enderio"
archivesBaseName = "EnderIO-Base"
version = "${minecraft_version}-${mod_version}.${buildnumber}"

boolean dev = System.getenv("RELEASE") == null || System.getenv("RELEASE").equalsIgnoreCase("false")

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}


// dependency string for the @Mod annotation
ext.dependencies = "required-after:forge@[${forgeDep_version},${forge_max_version});required-after:endercore@[${endercore_version},);after:jei@[${jei_version},)"

def type = 'release'
if (project.hasProperty('mod_appendix')) {
//    version += "_${project.mod_appendix}"
       type = project.mod_appendix
}

minecraft {
    mappings = "snapshot_20171025"
    version = "${minecraft_version}-${forge_version}"
    runDir = 'run'

    replace "@VERSION@", project.version
    replaceIn "EnderIO.java"
}

configurations {
    compile.extendsFrom exportedCompile
}

repositories {
    mavenCentral()
    maven { url "http://tehnut.info/maven" }
    maven { url = "http://dl.tsr.me/artifactory/libs-release-local" }
    maven { url = "http://maven.tterrag.com" }
    maven { url = "http://dvs1.progwml6.com/files/maven" } 
    maven { url = "http://files.minecraftforge.net/maven" }
    maven { url = "http://maven.cil.li/" }
    maven { url = "http://maven.ic2.player.to" }
    maven { url = "http://maven.epoxide.xyz" }
    maven { url = "http://maven.mcmoddev.com" }
    maven { url = "http://maven.covers1624.net" }
    ivy { url = "http://localhost:8080/job/EnderIO-Core/22/artifact/build/libs"
        layout "pattern", {
            artifact "[module]-[revision](-[classifier])(.[ext])"
        }
    }
    ivy {
        url "http://ae-mod.info/builds"
        layout "pattern", {
            artifact "[module]-[revision](-[classifier])(.[ext])"
        }
    }
    mavenLocal()
}

dependencies {

    if (!project.hasProperty('useLocalEnderCore')) {
        deobfCompile "com.enderio.core:EnderCore:${endercore_version}"
    }

    deobfCompile "mcp.mobius.waila:Hwyla:${waila_version}"
    deobfCompile "mezz.jei:jei_${minecraft_version}:${jei_version}"
    deobfCompile "li.cil.oc:OpenComputers:${oc_version}:api"
    deobfCompile "net.sengir.forestry:forestry_${minecraft_version}:${forestry_version}:api"
    compile "mcjty.theoneprobe:TheOneProbe-1.12:${top_version}:api"
    deobfCompile "team.chisel.ctm:CTM:${ctm_version}:api"
    compile "appeng:appliedenergistics2:${ae_version}:api"
    compile "net.darkhax.tesla:Tesla-${minecraft_version}:${tesla_version}"
    compile "cofh:CoFHCore:${mc_version}-${cofhcore_version}:deobf"
    compile "cofh:ThermalFoundation:${mc_version}-${tf_version}:deobf"
    compile "cofh:ThermalExpansion:${mc_version}-${te_version}:deobf"
    compile fileTree(dir: 'lib', include: '*.jar') 
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
	    exclude '**/unported/**'
        }
        resources {
            srcDir 'resources'
        }
    }
    api {
        java {
            srcDir 'CoFHLib/src/main/java'
            // Note: If this doesn't work in Eclipse, add those as Resource Filters to the package, not as filters to the source set...
            exclude '**/cofh/lib/**'
            exclude '**/IGeneratorParser.java'
        }
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

compileJava.doFirst {
    String modFile = 'build/sources/main/java/crazypants/enderio/EnderIO.java'
    File modFileFile = new File(projectDir, modFile) 
    String contents = modFileFile.getText('UTF-8')
    contents = contents.replaceAll('dependencies = ".*", guiFactory', 'dependencies = "' + project.ext.dependencies + '", guiFactory')
    modFileFile.write(contents, 'UTF-8')
    
    // This is needed because the classpath contains the dependencies before the api sourceSet. Which is not very nice.
    classpath = sourceSets.api.output + classpath
}

jar {
// // rename the AT file, uncomment this and "setupDecompWorkspace" to use the GlStateBuilder
//    manifest {
//        attributes 'FMLAT': 'enderio_AT.cfg'
//    }
//    from(sourceSets.main.resources.srcDirs) {
//        include 'enderio_AT.cfg'
//        into('/META-INF/')
//    }
    from { configurations.exportedCompile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
	include 'crazypants/enderio/api/**/*'
    classifier = 'api'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from { configurations.exportedCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    classifier = 'dev'
}

task exportJavadoc(type: Javadoc) {
    include 'crazypants/enderio/api/**/*'
    source = sourceSets.main.allSource
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

build.dependsOn sourceJar, apiJar

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar
            artifact apiJar            
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}

artifacts {
    archives sourceJar
    archives apiJar    
}


task checkTranslations << {
    Map<String, String> mapen = new LinkedHashMap<String, String>()
    (new File('resources/assets/enderio/lang/en_US.lang')).eachLine {
        def (value1, value2) = it.tokenize( '=' )
        if (value1 == null || value2 == null) {return}
        mapen.put(value1, value2)
    }
    
    new File('resources/assets/enderio/lang/').eachFileMatch( ~".*\\.lang\$" ) { langfile ->
        if (!langfile.getName().contains("en_US")) {
	        Map<String, String> map = new LinkedHashMap<String, String>()
	        File outfile = new File("${langfile}.txt")
	        Writer outwriter = outfile.newWriter("UTF8")
	        outwriter.write("\n// Additional translations:\n")
	        outwriter << langfile.filterLine {
	            def (value1, value2) = it.tokenize( '=' )
	            if (value1 == null || value2 == null) {return false}
	            map.put(value1, value2)
	            return !mapen.containsKey(value1)
	        }
	        
	        outwriter.append("\n// Missing translations:\n")
	        for (e in mapen) {
	            if (!map.containsKey(e.key)) {
	                outwriter.append(e.key + "=" + e.value + "\n")
	            }
	        }
        println "Created translation report ${outfile}"
        }
    }
}

String getCN() {
    def firsts = ['Donald', 'Lex', 'Mike', 'Arthur', 'Bridget', 'Dorian', 'Ford', 'Guy', 'James', 'Jessica', 'John', 'Michael', 'Robinson', 'Zaphod', 'Bell', 'Penelope']
    def lasts = ['Duck', 'Luthor', 'Meyers', 'Dent', 'Jones', 'Gray', 'Prefect', 'Montag', 'Moriarty', 'Rabbit', 'Watson', 'Smith', 'Corleone', 'Crusoe', 'Beeblebrox', 'Cranel', 'Akk']
    def rand = new Random()
    return firsts[rand.nextInt(firsts.size())] + ' ' + lasts[rand.nextInt(lasts.size())]
}

task mkKeyStore(type:Exec) {
   workingDir projectDir
   commandLine 'keytool', '-genkey', '-alias', 'signFiles', '-keystore', 'eiostore.jks', '-storepass', '123456', '-noprompt', '-dname', 'CN='+getCN(), '-keypass', '123456'
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    inputFile = jar.archivePath
    outputFile = jar.archivePath
    keyStore = 'eiostore.jks'
    alias = 'signFiles'
    storePass = '123456'
    keyPass = '123456'
}

task rmKeyStore(type: Delete) {
  delete 'eiostore.jks'
}

build.dependsOn rmKeyStore
rmKeyStore.dependsOn signJar
signJar.dependsOn mkKeyStore


tasks.curseforge.enabled = !dev && project.hasProperty('curseforge_key')
    
curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    project {
        id = project.curse_projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? "NA" : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = type
        mainArtifact(jar) {
            displayName = "${archivesBaseName} - ${version}"
        }
        relations {
          requiredLibrary 'endercore'
          optionalLibrary 'waila'
          optionalLibrary 'just-enough-items-jei'
          optionalLibrary 'the-one-probe'
          optionalLibrary 'baubles'
        }
    }
}
